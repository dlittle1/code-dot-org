#!/usr/bin/env ruby
#
# This script caches database queries whose results are displayed at studio.code.org/admin/stats.
#
require File.expand_path('../../../pegasus/src/env', __FILE__)
require src_dir 'database'
require 'cdo/properties'

DASHBOARD_REPORTING_DB_READONLY = sequel_connect(CDO.dashboard_reporting_db_reader, CDO.dashboard_reporting_db_reader)
SEVEN_DAYS = 7 * 24 * 60 * 60
THIRTY_DAYS = 30 * 24 * 60 * 60

def main()
  return unless only_one_running?(__FILE__)

  # Users, born and unborn.
  all_users = DASHBOARD_REPORTING_DB_READONLY[:users]
  all_students = all_users.where(user_type: 'student')
  all_teachers = all_users.where(user_type: 'teacher')
  # Born users.
  users = all_users.exclude(current_sign_in_at: nil) 
  students = users.where(user_type: 'student')
  teachers = users.where(user_type: 'teacher')
  # Active students.
  seven_day_active_students = students.where(current_sign_in_at: (Time.now - SEVEN_DAYS)..Time.now)
  thirty_day_active_students = students.
    where(current_sign_in_at: (Time.now - THIRTY_DAYS)..Time.now)
  # Retention of students...
  # ...for measuring the percentage of students with accounts at least thirty-seven days and logged
  #    in at least once after thirty days.
  thirty_day_retention_historical_baseline = students.
    where(created_at: Time.new(1970, 1, 1)..(Time.now - (THIRTY_DAYS + SEVEN_DAYS)))
  thirty_day_retention_historical = thirty_day_retention_historical_baseline.
    where(current_sign_in_at: (created_at + THIRTY_DAYS)..Time.now)
  # ...for measuring the percentage of students that started thirty-seven to forty-four days ago
  #    and logged in at least once after thirty days.
  thirty_day_retention_current_weekly_baseline = students.
    where(created_at: (Time.now - (THIRTY_DAYS + 2 * SEVEN_DAYS))..(Time.now - (THIRTY_DAYS + SEVEN_DAYS)))
  thirty_day_retention_current_weekly = thirty_day_retention_current_weekly_baseline.
    where(current_sign_in_at: (created_at + THIRTY_DAYS)..Time.now)
  # ...for measuring the percentage of students that started sixty to ninety days ago and logged in
  #    at least once after thirty days
  thirty_day_retention_current_monthly = students.
    where(created_at: (Time.now - (3 * THIRTY_DAYS))..(Time.now - (2 * THIRTY_DAYS))).
  thirty_day_retention_current_monthly = thirty_day_retention_current_monthly.
    where(current_sign_in_at: (created_at + THIRTY_DAYS)..Time.now)

  # Students and teachers.
  followers = DASHBOARD_REPORTING_DB_READONLY[:followers] 

  Properties.set(:admin_stats, {
    accounts: {
      users: all_users.count,
      students: all_students.count,
      teachers: all_teachers.count,
    },
    born_accounts: {
      users: users.count,
      students: students.count,
      female_students: students.where(gender: 'f').count,
      male_students: students.where(gender: 'm').count,
      teachers: teachers.count,
      female_teachers: teachers.where(gender: 'f').count,
      male_teachers: teachers.where(gender: 'm').count,
    },
    actives: {
      seven_day_students: seven_day_active_students.count,
      seven_day_female_students: seven_day_active_students.where(gender: 'f').count,
      seven_day_male_students: seven_day_active_students.where(gender: 'm').count,
      thirty_day_students: thirty_day_active_students.count,
      thirty_day_female_students: thirty_day_active_students.where(gender: 'f').count,
      thirty_day_male_students: thirty_day_active_students.where(gender: 'm').count,
    },
    thiry_day_retention_historical: {
      students: thirty_day_retention_historical.count.to_f /
        thirty_day_retention_historical_baseline.count.to_f
      female_students: thirty_day_retention_historical.where(gender: 'f').count.to_f /
        thirty_day_retention_historical_baseline.where(gender: 'f').count.to_f
      male_students: thirty_day_retention_historical.where(gender: 'm').count.to_f /
        thirty_day_retention_historical_baseline.where(gender: 'm').count.to_f
      us_students: thirty_day_retention_historical.where(locale: 'en-us').count.to_f /
        thirty_day_retention_historical_baseline.where(locale: 'en-us').count.to_f
      non_us_students: thirty_day_retention_historical.exclude(locale: 'en-us').count.to_f /
        thirty_day_retention_historical_baseline.exclude(locale: 'en-us').count.to_f
    },
    thiry_day_retention_current_weekly: {
      students: thirty_day_retention_current_weekly.count.to_f /
        thirty_day_retention_current_weekly_baseline.count.to_f
      female_students: thirty_day_retention_current_weekly.where(gender: 'f').count.to_f /
        thirty_day_retention_current_weekly_baseline.where(gender: 'f').count.to_f
      male_students: thirty_day_retention_current_weekly.where(gender: 'm').count.to_f /
        thirty_day_retention_current_weekly_baseline.where(gender: 'm').count.to_f
      us_students: thirty_day_retention_current_weekly.where(locale: 'en-us').count.to_f /
        thirty_day_retention_current_weekly_baseline.where(locale: 'en-us').count.to_f
      non_us_students: thirty_day_retention_current_weekly.exclude(locale: 'en-us').count.to_f /
        thirty_day_retention_current_weekly_baseline.exclude(locale: 'en-us').count.to_f
    },
    thiry_day_retention_currently_monthly: {
      students: thirty_day_retention_currently_monthly.count.to_f /
        thirty_day_retention_currently_monthly_baseline.count.to_f
      female_students: thirty_day_retention_currently_monthly.where(gender: 'f').count.to_f /
        thirty_day_retention_currently_monthly_baseline.where(gender: 'f').count.to_f
      male_students: thirty_day_retention_currently_monthly.where(gender: 'm').count.to_f /
        thirty_day_retention_currently_monthly_baseline.where(gender: 'm').count.to_f
      us_students: thirty_day_retention_currently_monthly.where(locale: 'en-us').count.to_f /
        thirty_day_retention_currently_monthly_baseline.where(locale: 'en-us').count.to_f
      non_us_students: thirty_day_retention_currently_monthly.exclude(locale: 'en-us').count.to_f /
        thirty_day_retention_currently_monthly_baseline.exclude(locale: 'en-us').count.to_f
    },
    students_and_teachers: {
      students: followers.distinct.select(:student_user_id).count
    }
  })
end

main()
