#!/usr/bin/env ruby
require_relative '../mailing-common/mailing-list-utils'
require 'set'

# https://www.dropbox.com/s/upxdp1yam0jd9lf/1.2.2016.csv?dl=0
#CURRENT_TEACHERS_FILE = 'current-teachers.csv'
EXCLUDED_EMAILS = Set.new
REGIONS = {}

def query_with_location(base_query, city, state)
  query = "(#{base_query}) && ((location_state_s:\"#{state}\" && location_city_s:\"#{city}\") || (create_ip_state_s:\"#{state}\" && create_ip_city_s:\"#{city}\"))"
  results = query_subscribed_contacts(q: query)

  puts "#{results.length} results"
  results
end

def query_teachers_with_location(city, state)
  base_query =
    # BringToSchool2013
    '(kind_s:BringToSchool2013 && role_s:teacher) || ' +

    # Petition teachers
    '(kind_s:Petition && role_s:educator) || ' +

    # Past 2013 organizers
    '(kind_s:CSEdWeekEvent2013 && role_s:teacher) || ' +

    # Past 2014 organizers
    'kind_s:HocSignup2014 || ' +

    # HOC 2015 organizers
    'kind_s:HocSignup2015 || ' +

    # Code studio teachers
    '(kind_s:user && role_s:teacher)'

  query_with_location(base_query, city, state)
end

# Load current teachers, so they can be excluded from the email lists
#CSV.foreach(CURRENT_TEACHERS_FILE, headers: true) do |row|
#  EXCLUDED_EMAILS.add row['teacher_email']
#end

region_name = 'NYC'
region = REGIONS[region_name] = {}

region[:locations] ||= []
state = 'New York'
['New York', 'Staten Island', 'Bronx', 'Brooklyn', 'Queens'].each do |city|
  location = {state: state, city: city, districts: []}
  region[:locations] << location
end

p REGIONS

puts "Processing #{REGIONS.length} regions:"
REGIONS.each do |region_name, region|
  region_results = {}
  puts region_name
  region[:locations].each do |entry|
    puts "  #{entry[:city]}, #{entry[:state]}"
    region_results.merge! query_teachers_with_location(entry[:city], entry[:state])
  end
  initial_count = region_results.length
  region_results.reject! {|email,_| EXCLUDED_EMAILS.include? email}
  final_count = region_results.length

  region[:counts] = {final: final_count, excluded: initial_count - final_count}
  puts "\n#{region_name}: #{initial_count} total results, #{final_count} after exclusion.\n\n"
  export_contacts_to_csv region_results, "Teachers_#{region_name}.csv"
end
